import random
import csv
import codecs
import time
from threading import Thread, Timer
import random
import msvcrt
import sys


# class TimeoutExpired(Exception):
#     pass
#
#
# def input_with_timeout(prompt, timeout, timer=time.monotonic):
#     sys.stdout.write(prompt)
#     sys.stdout.flush()
#     endtime = timer() + timeout
#     result = []
#     while timer() < endtime:
#         if msvcrt.kbhit():
#             result.append(msvcrt.getwche()) #XXX can it block on multibyte characters?
#             if result[-1] == '\n':   #XXX check what Windows returns here
#                 return ''.join(result[:-1])
#         time.sleep(0.04) # just to yield to other processes/threads
#     raise TimeoutExpired
#
#
# def setTimeout():
#     return 20


class compPlayer():
    def __init__(self, name, maxPoints):
        self.points = 0
        self.name = name
        self.maxPoints = maxPoints

    # we will make this randomly generated by questions later instead of total points so it would be like the bot
    # is playing
    def totalPoints(self):
        self.points = random.randint(0,self.maxPoints)
        return self.points


# adds words individually into a list
def makeList(qList):
    header = 0
    # with open('Questions.csv', 'r') as csvfile:
    with codecs.open('Questions.csv', "r", encoding='utf-8', errors='ignore') as csvfile:
        csvreader = csv.reader(csvfile)
        for row in csvreader:
            if header == 0:
                header += 1
            else:
                qList.append(row)
    csvfile.close()
    return qList


def selectDifficulty():
    difficulty = str(input("What difficulty of bot do you want to play against? (1 - easy, 2 - medium, 3 hard): "))
    while str(difficulty) != '1' and str(difficulty) != '2' and str(difficulty) != '3':
        difficulty = str(input("Please input a number that was specified previously! (1 - easy, 2 - medium, 3 hard): "))
    print()
    difficulty = int(difficulty)
    levels = ['easy', 'medium', 'hard']
    print("Okay, you will play against a bot with a difficulty level of " + str(levels[difficulty - 1]) + ".")
    return difficulty


def selectNumQuestions():
    # numQuestions = str(input("How many questions do you want (1-Infinite)? "))
    print("There are two modes in this trivia game: unlimited questions mode or capped questions mode.")
    mode = str(input("Please indicate which game mode you wish to play (1 - unlimited, 2 - capped): "))
    # numQuestions = str(input("How many questions do you want (1-30)? "))
    numQuestions = 0
    flag = False
    while not flag:
        try:
            mode = int(mode)
            if mode != 1 and mode != 2:
                mode = str(input("Please enter an acceptable game mode (1 - unlimited, 2 - capped): "))
            else:
                flag = True
        except:
            mode = str(input("Please enter an acceptable game mode (1 - unlimited, 2 - capped): "))

    print()
    # print("Okay, you will have " + str(numQuestions) + " question(s).")
    if mode == 1:
        print("You have selected unlimited mode! To quit the game, simply type \'quit\' and your score will be "
              "tallied.")
    else:
        print("You have selected capped mode!")
        numQuestions = str(input("Please indicate how many questions you would like: "))
        flag = False
        while not flag:
            try:
                numQuestions = int(numQuestions)
                if numQuestions < 1:
                    numQuestions = str(input("Please enter an acceptable number of questions (e.g. 15): "))
                else:
                    flag = True
            except:
                numQuestions = str(input("Please enter an acceptable number of questions (e.g. 15): "))
        print("You will now have " + str(numQuestions) + " questions. If you wish to quit the game early, simply type "
                                                         "\'quit\' and your score will be tallied.")

    print()
    if mode == 1:
        return -1
    else:
        return numQuestions


def askQuestion(q, qList, num):
    print("Question " + str(num) + '!')
    print(qList[q][0])
    print("")
    print("Answer Choices:")
    print('A) ' + qList[q][1])
    print('B) ' + qList[q][2])
    print('C) ' + qList[q][3])
    print('D) ' + qList[q][4])
    print()
    return ""


def answerQuestion(q, qList, points, difficulty):
    answer = qList[q][5]
    ansLetter = answer[0].lower()
    ansActual = answer[3:].lower()
    timeout = setTimeout()
    x = ""
    try:
        x = str(input("Your answer: "))
    except TimeoutExpired:
        print("Oops, you ran out of time!")
    if x.lower() == "quit":
        return True
    if x.lower() == ansLetter or x.lower() == ansActual:
        points[0] += 1
        print("Correct! You now have " + str(points[0]) + " point(s).\n")
    #     return False
    # elif x.lower() == "stop":
    #     print("Game Stopped")
    #     return True
    else:
        print("Incorrect! The correct answer is " + answer + ". You still have " + str(points[0]) + " point(s).\n")

    if difficulty == 1:
        correct_answer = 1
        correct_answer_2 = 2
        bot_answer = random.randint(1, 8)
        if bot_answer == correct_answer or bot_answer == correct_answer_2:
            points[1] += 1
            print("The bot got the answer correct! The bot now has " + str(points[1]) + " points.")
            print()
        else: 
            print("The bot got the answer incorrect! The bot still has " + str(points[1]) + " points.")
            print()

    if difficulty == 2:
        correct_answer = 1
        correct_answer_2 = 2
        bot_answer = random.randint(1, 5)
        if bot_answer == correct_answer or bot_answer == correct_answer_2:
            points[1] += 1
            print("The bot got the answer correct! The bot now has " + str(points[1]) + " points.")
            print()
        else: 
            print("The bot got the answer incorrect! The bot still has " + str(points[1]) + " points.")
            print()

    if difficulty == 3:
        correct_answer = 1
        correct_answer_2 = 2
        bot_answer = random.randint(1, 3)
        if bot_answer == correct_answer or bot_answer == correct_answer_2:
            points[1] += 1
            print("The bot got the answer correct! The bot now has " + str(points[1]) + " points.")
            print()
        else: 
            print("The bot got the answer incorrect! The bot still has " + str(points[1]) + " points.")
            print()

    return False


def calculateScores(points):
    print("Your score is: " + str(points[0]))
    # for bots in range (numBots):
    #     print(bot.name + " score is: " + str(bot.totalPoints()))
    print("The bot's score is: " + str(points[1]))
    if points[0] > points[1]:
        print("Congratulations! You win!")
        return "win"
    elif points[0] == points[1]:
        print("It's a tie! Better luck next time!")
        return "tie"
    else:
        print("You lose! Try again!")
        return "lose"


def main():
    # file = open("Questions.csv", "r") #reading file
    # quiz = file.read()
    # qList = []
    # qList = makeList(quiz)
    # print(qList)
    qList = []
    makeList(qList)

    print('Welcome to our trivia game! Test your knowledge about our CS329E class!')
    print()
    print('Here are our rules:')
    print('1) You will be playing against a bot with a difficulty of your choosing.')
    print('2) There are two modes for this trivia game: unlimited questions and a regular game with the '
          'number of questions of your choosing.')
    print('3) Earn points by answering the questions correctly. You may answer through short answer (e.g. apple, '
          'banana) or through letter association (e.g. A, B, C, D)')
    print('4) Some specialty questions are sprinkled in. True/false will show 4 answer choices, but only A (true) or '
          'B (false) will correctly answer the question.')
    print('5) Another specialty question is the FRQ question. It is up to you to type out the correct answer '
          'in order to get the points.')
    print('6) After you give your answer, the bot will have a chance at answering the question. The difficulty '
          'will determine how good it is at getting the right answer.')
    print()

    numQuestions = selectNumQuestions()

    #creating the different computers
    # numBots = int(input("How many players do you want to play against (0-3)?"))
    # print("Okay you will be playing against " + str(numBots) + " computer(s)")
    # for bots in range(numBots):
    #     maxPoints = numQuestions
    #     bot = compPlayer("Computer" + str(bots+1), maxPoints)
    #     print(bot.name)

    difficulty = selectDifficulty()

    print()
    input("Press any key to start!")
    print()

    #asking questions
    stopper = False
    points = [0, 0]
    # while stopper == False and q < numQuestions:
    tracker = 1
    while tracker <= numQuestions or numQuestions == -1:
        q = random.randint(0, len(qList) - 1)
        askQuestion(q, qList, tracker)
        quit = answerQuestion(q, qList, points, difficulty)
        if quit:
            print()
            break
        tracker += 1

        #grading the question and giving out points
        # if x == qList[q]:
        #     playerPoints += 1
        #     print("Good Job, you have " + str(playerPoints) + " points\n")
        # else:
        #     print("You Suck, you have " +str(playerPoints) +" points\n")

    input("Game finished. Press any key to see final score.")
    calculateScores(points)


if __name__ == '__main__':
    main()
